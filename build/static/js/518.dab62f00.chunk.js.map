{"version":3,"file":"static/js/518.dab62f00.chunk.js","mappings":"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","sources":["components/TimeSlot.jsx","pages/BookAppointment.jsx"],"sourcesContent":["import React from 'react';\r\n\r\nconst TimeSlot = ({ slot, selected, onChange }) => {\r\n  const id = `slot-${slot.replace(/\\s+/g, '')}`;\r\n  \r\n  return (\r\n    <div className=\"time-slot-wrapper\">\r\n      <input\r\n        type=\"radio\"\r\n        id={id}\r\n        name=\"timeSlot\"\r\n        value={slot}\r\n        checked={selected}\r\n        onChange={() => onChange(slot)}\r\n        className=\"time-slot-input\"\r\n      />\r\n      <label htmlFor={id} className=\"time-slot-label\">\r\n        {slot}\r\n      </label>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TimeSlot; ","import React, { useState, useEffect, useCallback } from 'react';\r\nimport { useParams, useNavigate, useLocation } from 'react-router-dom';\r\nimport { doctorAPI, appointmentAPI } from '../api';\r\nimport { useAuth } from '../contexts/AuthContext';\r\nimport { format } from 'date-fns';\r\nimport '../styles/appointment.css';\r\nimport TimeSlot from '../components/TimeSlot';\r\n\r\nconst BookAppointment = () => {\r\n  const { id } = useParams();\r\n  const navigate = useNavigate();\r\n  const location = useLocation();\r\n  const { currentUser } = useAuth();\r\n  const searchParams = new URLSearchParams(location.search);\r\n  \r\n  const [doctor, setDoctor] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n  const [submitting, setSubmitting] = useState(false);\r\n  const [error, setError] = useState('');\r\n  const [success, setSuccess] = useState(false);\r\n  \r\n  // Form state\r\n  const [formData, setFormData] = useState({\r\n    date: searchParams.get('date') || format(new Date(), 'yyyy-MM-dd'),\r\n    timeSlot: searchParams.get('slot') || '',\r\n    reason: '',\r\n    notes: ''\r\n  });\r\n  \r\n  const [availableSlots, setAvailableSlots] = useState([]);\r\n\r\n  const fetchDoctorDetails = useCallback(async () => {\r\n    try {\r\n      setLoading(true);\r\n      const response = await doctorAPI.getDoctorById(id);\r\n      \r\n      if (response.data.success) {\r\n        setDoctor(response.data.data);\r\n      } else {\r\n        setError('Failed to fetch doctor details');\r\n      }\r\n    } catch (err) {\r\n      console.error('Error fetching doctor details:', err);\r\n      setError('Error loading doctor information. Please try again later.');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, [id]);\r\n\r\n  const fetchAvailability = useCallback(async () => {\r\n    try {\r\n      const response = await doctorAPI.getDoctorAvailability(id, formData.date);\r\n      \r\n      if (response.data.success) {\r\n        setAvailableSlots(response.data.availableSlots);\r\n        \r\n        // If the current selected slot is not available, reset it\r\n        if (formData.timeSlot && !response.data.availableSlots.includes(formData.timeSlot)) {\r\n          setFormData(prev => ({ ...prev, timeSlot: '' }));\r\n        }\r\n      }\r\n    } catch (err) {\r\n      console.error('Error fetching availability:', err);\r\n    }\r\n  }, [id, formData.date, formData.timeSlot]);\r\n\r\n  useEffect(() => {\r\n    // Redirect if user is not a patient\r\n    if (currentUser && currentUser.role !== 'patient') {\r\n      setError('Only patients can book appointments');\r\n      return;\r\n    }\r\n    \r\n    fetchDoctorDetails();\r\n  }, [currentUser, fetchDoctorDetails]);\r\n\r\n  useEffect(() => {\r\n    if (doctor) {\r\n      fetchAvailability();\r\n    }\r\n  }, [doctor, fetchAvailability]);\r\n\r\n  const handleInputChange = (e) => {\r\n    const { name, value } = e.target;\r\n    setFormData(prev => ({\r\n      ...prev,\r\n      [name]: value\r\n    }));\r\n  };\r\n\r\n  const handleTimeSlotChange = (slot) => {\r\n    setFormData(prev => ({\r\n      ...prev,\r\n      timeSlot: slot\r\n    }));\r\n  };\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n    \r\n    if (!formData.timeSlot) {\r\n      setError('Please select a time slot');\r\n      return;\r\n    }\r\n    \r\n    if (!formData.reason.trim()) {\r\n      setError('Please provide a reason for the appointment');\r\n      return;\r\n    }\r\n    \r\n    try {\r\n      setSubmitting(true);\r\n      setError('');\r\n      \r\n      const appointmentData = {\r\n        doctorId: id,\r\n        date: formData.date,\r\n        timeSlot: formData.timeSlot,\r\n        reason: formData.reason,\r\n        notes: formData.notes\r\n      };\r\n      \r\n      const response = await appointmentAPI.createAppointment(appointmentData);\r\n      \r\n      if (response.data.success) {\r\n        setSuccess(true);\r\n        // Reset form\r\n        setFormData({\r\n          date: format(new Date(), 'yyyy-MM-dd'),\r\n          timeSlot: '',\r\n          reason: '',\r\n          notes: ''\r\n        });\r\n        \r\n        // Redirect after 2 seconds\r\n        setTimeout(() => {\r\n          navigate('/appointments');\r\n        }, 2000);\r\n      } else {\r\n        setError('Failed to book appointment');\r\n      }\r\n    } catch (err) {\r\n      console.error('Error booking appointment:', err);\r\n      if (err.response && err.response.data) {\r\n        setError(err.response.data.error || 'Failed to book appointment');\r\n      } else {\r\n        setError('Failed to book appointment. Please try again later.');\r\n      }\r\n    } finally {\r\n      setSubmitting(false);\r\n    }\r\n  };\r\n\r\n  // Calculate minimum date (today)\r\n  const today = new Date();\r\n  const minDate = format(today, 'yyyy-MM-dd');\r\n  \r\n  // Calculate maximum date (3 months from now)\r\n  const maxDate = format(new Date(today.setMonth(today.getMonth() + 3)), 'yyyy-MM-dd');\r\n\r\n  const timeSlotStyle = {\r\n    display: 'grid',\r\n    gridTemplateColumns: 'repeat(auto-fill, minmax(120px, 1fr))',\r\n    gap: '10px',\r\n    marginTop: '10px'\r\n  };\r\n\r\n  const formCheckStyle = {\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n    padding: '8px 12px',\r\n    borderRadius: '8px',\r\n    backgroundColor: '#f5f5f5',\r\n    transition: 'all 0.2s',\r\n    cursor: 'pointer',\r\n    margin: '0 0 8px 0'\r\n  };\r\n\r\n  const radioStyle = {\r\n    marginRight: '10px',\r\n    marginTop: '0',\r\n    position: 'static'\r\n  };\r\n\r\n  const labelStyle = {\r\n    marginBottom: '0',\r\n    fontWeight: '500',\r\n    whiteSpace: 'nowrap'\r\n  };\r\n\r\n  if (loading) {\r\n    return <div className=\"loading\">Loading...</div>;\r\n  }\r\n\r\n  if (!doctor) {\r\n    return <div className=\"error alert alert-danger\">Doctor not found</div>;\r\n  }\r\n\r\n  return (\r\n    <div className=\"book-appointment\">\r\n      <h1>Book an Appointment</h1>\r\n      \r\n      {success && (\r\n        <div className=\"alert alert-success\">\r\n          Appointment booked successfully! Redirecting to your appointments...\r\n        </div>\r\n      )}\r\n      \r\n      {error && <div className=\"alert alert-danger\">{error}</div>}\r\n      \r\n      <div className=\"doctor-info card mb-4\">\r\n        <div className=\"card-body\">\r\n          <h3>Doctor: {doctor.name}</h3>\r\n          <p><strong>Specialization:</strong> {doctor.specialization}</p>\r\n        </div>\r\n      </div>\r\n      \r\n      <div className=\"appointment-form card\">\r\n        <div className=\"card-body\">\r\n          <form onSubmit={handleSubmit}>\r\n            <div className=\"form-group\">\r\n              <label htmlFor=\"date\">Appointment Date:</label>\r\n              <input\r\n                type=\"date\"\r\n                id=\"date\"\r\n                name=\"date\"\r\n                className=\"form-control\"\r\n                value={formData.date}\r\n                onChange={handleInputChange}\r\n                min={minDate}\r\n                max={maxDate}\r\n                required\r\n              />\r\n            </div>\r\n            \r\n            <div className=\"form-group\">\r\n              <label htmlFor=\"timeSlot\">Available Time Slots:</label>\r\n              {availableSlots.length === 0 ? (\r\n                <p className=\"text-danger\">No available slots for the selected date.</p>\r\n              ) : (\r\n                <div style={timeSlotStyle}>\r\n                  {availableSlots.map(slot => (\r\n                    <div key={slot} style={formCheckStyle}>\r\n                      <input\r\n                        style={radioStyle}\r\n                        type=\"radio\"\r\n                        name=\"timeSlot\"\r\n                        id={`slot-${slot.replace(/\\s+/g, '')}`}\r\n                        value={slot}\r\n                        checked={formData.timeSlot === slot}\r\n                        onChange={handleInputChange}\r\n                      />\r\n                      <label style={labelStyle} htmlFor={`slot-${slot.replace(/\\s+/g, '')}`}>\r\n                        {slot}\r\n                      </label>\r\n                    </div>\r\n                  ))}\r\n                </div>\r\n              )}\r\n            </div>\r\n            \r\n            <div className=\"form-group\">\r\n              <label htmlFor=\"reason\">Reason for Appointment:</label>\r\n              <input\r\n                type=\"text\"\r\n                id=\"reason\"\r\n                name=\"reason\"\r\n                className=\"form-control\"\r\n                value={formData.reason}\r\n                onChange={handleInputChange}\r\n                placeholder=\"Brief reason for your visit\"\r\n                required\r\n              />\r\n            </div>\r\n            \r\n            <div className=\"form-group\">\r\n              <label htmlFor=\"notes\">Additional Notes (Optional):</label>\r\n              <textarea\r\n                id=\"notes\"\r\n                name=\"notes\"\r\n                className=\"form-control\"\r\n                value={formData.notes}\r\n                onChange={handleInputChange}\r\n                placeholder=\"Any additional information you'd like to share\"\r\n                rows=\"3\"\r\n              ></textarea>\r\n            </div>\r\n            \r\n            <button\r\n              type=\"submit\"\r\n              className=\"btn btn-primary\"\r\n              disabled={submitting || availableSlots.length === 0 || !formData.timeSlot}\r\n            >\r\n              {submitting ? 'Booking...' : 'Book Appointment'}\r\n            </button>\r\n          </form>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default BookAppointment; "],"names":["BookAppointment","id","useParams","navigate","useNavigate","location","useLocation","currentUser","useAuth","searchParams","URLSearchParams","search","doctor","setDoctor","useState","loading","setLoading","submitting","setSubmitting","error","setError","success","setSuccess","formData","setFormData","date","get","format","Date","timeSlot","reason","notes","availableSlots","setAvailableSlots","fetchDoctorDetails","useCallback","async","response","doctorAPI","getDoctorById","data","err","console","fetchAvailability","getDoctorAvailability","includes","prev","_objectSpread","useEffect","role","handleInputChange","e","name","value","target","today","minDate","maxDate","setMonth","getMonth","formCheckStyle","display","alignItems","padding","borderRadius","backgroundColor","transition","cursor","margin","radioStyle","marginRight","marginTop","position","labelStyle","marginBottom","fontWeight","whiteSpace","_jsx","className","children","_jsxs","specialization","onSubmit","preventDefault","trim","appointmentData","doctorId","appointmentAPI","createAppointment","setTimeout","htmlFor","type","onChange","min","max","required","length","style","gridTemplateColumns","gap","map","slot","concat","replace","checked","placeholder","rows","disabled"],"sourceRoot":""}