{"version":3,"file":"static/js/941.19a0d56a.chunk.js","mappings":"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","sources":["components/HealthSummary.jsx","pages/Dashboard.jsx"],"sourcesContent":["// src/components/HealthSummary.js\r\nimport React from 'react';\r\n\r\n// Icons for health metrics\r\nconst icons = {\r\n  heart: \"❤️\",\r\n  bloodPressure: \"🩸\",\r\n  weight: \"⚖️\",\r\n  glucose: \"🔬\"\r\n};\r\n\r\nconst HealthSummary = ({ summary, selectedEntry }) => {\r\n  // Use selected entry if available, otherwise use summary data\r\n  const displayData = selectedEntry || summary;\r\n  \r\n  if (!displayData || Object.keys(displayData).length === 0) {\r\n    return (\r\n      <div className=\"health-summary empty-summary animate-fade-in\">\r\n        <h2 className=\"med-card-title\">Health Summary</h2>\r\n        <p>No health data recorded yet. Start by recording your health information.</p>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  // Check if we're displaying a selected entry or summary data\r\n  const isSelectedEntry = !!selectedEntry;\r\n  \r\n  return (\r\n    <div className=\"health-summary animate-slide-in\">\r\n      <h2 className=\"med-card-title\">\r\n        {isSelectedEntry ? 'Selected Health Record' : 'Health Summary'}\r\n        {isSelectedEntry && (\r\n          <span className=\"summary-date\">\r\n            {new Date(selectedEntry.date).toLocaleDateString()}\r\n          </span>\r\n        )}\r\n      </h2>\r\n      \r\n      <div className=\"summary-grid animate-stagger\">\r\n        {(displayData.bloodPressure?.systolic !== null && displayData.bloodPressure?.diastolic !== null) && (\r\n          <div className=\"summary-card\">\r\n            <div className=\"summary-header\">\r\n              <span className=\"health-icon blood-pressure\">{icons.bloodPressure}</span>\r\n              <h3>Blood Pressure</h3>\r\n            </div>\r\n            <div className=\"summary-value\">{displayData.bloodPressure.systolic}/{displayData.bloodPressure.diastolic}</div>\r\n            <div className=\"summary-detail\">\r\n              <span>{isSelectedEntry ? 'Exact value' : 'Latest reading'}</span>\r\n            </div>\r\n          </div>\r\n        )}\r\n        \r\n        {displayData.heartRate !== null && (\r\n          <div className=\"summary-card\">\r\n            <div className=\"summary-header\">\r\n              <span className=\"health-icon heart\">{icons.heart}</span>\r\n              <h3>Heart Rate</h3>\r\n            </div>\r\n            <div className=\"summary-value\">{displayData.heartRate} <span>bpm</span></div>\r\n            <div className=\"summary-detail\">\r\n              <span>{isSelectedEntry ? 'Exact value' : 'Latest reading'}</span>\r\n            </div>\r\n          </div>\r\n        )}\r\n        \r\n        {displayData.weight !== null && (\r\n          <div className=\"summary-card\">\r\n            <div className=\"summary-header\">\r\n              <span className=\"health-icon weight\">{icons.weight}</span>\r\n              <h3>Weight</h3>\r\n            </div>\r\n            <div className=\"summary-value\">{displayData.weight} <span>kg</span></div>\r\n            <div className=\"summary-detail\">\r\n              <span>{isSelectedEntry ? 'Exact value' : 'Latest reading'}</span>\r\n            </div>\r\n          </div>\r\n        )}\r\n        \r\n        {displayData.glucoseLevel !== null && (\r\n          <div className=\"summary-card\">\r\n            <div className=\"summary-header\">\r\n              <span className=\"health-icon glucose\">{icons.glucose}</span>\r\n              <h3>Glucose Level</h3>\r\n            </div>\r\n            <div className=\"summary-value\">{displayData.glucoseLevel} <span>mg/dL</span></div>\r\n            <div className=\"summary-detail\">\r\n              <span>{isSelectedEntry ? 'Exact value' : 'Latest reading'}</span>\r\n            </div>\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default HealthSummary;","// src/pages/Dashboard.js\r\nimport React, { useState, useEffect } from 'react';\r\nimport { Link, useNavigate } from 'react-router-dom';\r\nimport { useAuth } from '../contexts/AuthContext';\r\nimport { healthAPI, patientAPI, appointmentAPI } from '../api';\r\nimport HealthSummary from '../components/HealthSummary';\r\nimport { format } from 'date-fns';\r\n\r\n// Icons (using emoji for simplicity, can be replaced with proper icons)\r\nconst icons = {\r\n  heart: \"❤️\",\r\n  bloodPressure: \"🩸\",\r\n  weight: \"⚖️\",\r\n  glucose: \"🔬\",\r\n  record: \"📝\",\r\n  history: \"📊\",\r\n  patient: \"👤\",\r\n  doctor: \"👨‍⚕️\",\r\n  qualification: \"🎓\",\r\n  calendar: \"📅\",\r\n  symptoms: \"🤒\",\r\n  medications: \"💊\",\r\n  notes: \"📋\",\r\n  recordedBy: \"👩‍⚕️\",\r\n  trash: \"🗑️\"\r\n};\r\n\r\nconst Dashboard = () => {\r\n  const { currentUser } = useAuth();\r\n  const navigate = useNavigate();\r\n  const [healthData, setHealthData] = useState({\r\n    recentEntries: [],\r\n    summary: {}\r\n  });\r\n  const [patientCount, setPatientCount] = useState(0);\r\n  const [appointmentsCount, setAppointmentsCount] = useState(0);\r\n  const [pendingRequestsCount, setPendingRequestsCount] = useState(0);\r\n  const [appointments, setAppointments] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState('');\r\n  const [selectedEntry, setSelectedEntry] = useState(null);\r\n  const [confirmDelete, setConfirmDelete] = useState(null);\r\n  const [deleteLoading, setDeleteLoading] = useState(false);\r\n  \r\n  const isDoctor = currentUser?.role === 'doctor';\r\n  const isAdmin = currentUser?.role === 'admin';\r\n\r\n  // Redirect admin users to the admin dashboard\r\n  useEffect(() => {\r\n    if (isAdmin) {\r\n      navigate('/admin/dashboard');\r\n    }\r\n  }, [isAdmin, navigate]);\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      try {\r\n        // Don't fetch data if user is admin\r\n        if (isAdmin) {\r\n          setLoading(false);\r\n          return;\r\n        }\r\n\r\n        if (isDoctor) {\r\n          // For doctor dashboard, fetch doctor's patients only\r\n          const patientsResponse = await patientAPI.getVisitedPatients();\r\n          if (patientsResponse.data && patientsResponse.data.success) {\r\n            setPatientCount(patientsResponse.data.count || 0);\r\n          }\r\n          \r\n          // Fetch both confirmed and pending appointments for doctors\r\n          const confirmedAppointmentResponse = await appointmentAPI.getMyAppointments({\r\n            status: 'confirmed'\r\n          });\r\n          \r\n          if (confirmedAppointmentResponse.data && confirmedAppointmentResponse.data.success) {\r\n            const confirmedAppointments = confirmedAppointmentResponse.data.data;\r\n            setAppointments(confirmedAppointments);\r\n            setAppointmentsCount(confirmedAppointments.length);\r\n          }\r\n          \r\n          // Fetch pending appointment requests count\r\n          const pendingAppointmentResponse = await appointmentAPI.getMyAppointments({\r\n            status: 'pending'\r\n          });\r\n          \r\n          if (pendingAppointmentResponse.data && pendingAppointmentResponse.data.success) {\r\n            setPendingRequestsCount(pendingAppointmentResponse.data.count || 0);\r\n          }\r\n        } else {\r\n          // Fetch health data for patients\r\n          const response = await healthAPI.getDashboardData();\r\n          // Check if the response has the correct structure\r\n          if (response.data && response.data.data) {\r\n            setHealthData(response.data.data);\r\n          } else {\r\n            setHealthData({ recentEntries: [], summary: {} });\r\n            setError('Invalid data structure received from server');\r\n          }\r\n        }\r\n      } catch (error) {\r\n        setError(isDoctor ? 'Failed to load doctor dashboard data' : 'Failed to load dashboard data');\r\n        console.error('Error fetching data:', error);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchData();\r\n  }, [isDoctor, isAdmin, currentUser, navigate]);\r\n\r\n  // Format date for appointments\r\n  const formatAppointmentDate = (dateString) => {\r\n    const date = new Date(dateString);\r\n    return format(date, 'MMMM d, yyyy');\r\n  };\r\n\r\n  // Format time for appointments\r\n  const formatTimeSlot = (timeSlot) => {\r\n    if (!timeSlot) return '';\r\n    // Make sure time displays in a consistent format (e.g., \"10:00 AM\" instead of \"10:00AM\")\r\n    return timeSlot.replace(/([0-9]):([0-9]{2})([AP]M)/, '$1:$2 $3');\r\n  };\r\n\r\n  // Function to capitalize first letter of each word\r\n  const capitalizeFirstLetter = (string) => {\r\n    if (!string) return '';\r\n    return string.split(' ')\r\n      .map(word => word.charAt(0).toUpperCase() + word.slice(1).toLowerCase())\r\n      .join(' ');\r\n  };\r\n\r\n  // Handle click on health entry\r\n  const handleEntryClick = (entry) => {\r\n    if (selectedEntry && selectedEntry._id === entry._id) {\r\n      // If clicking on the same entry that's already selected, collapse it\r\n      setSelectedEntry(null);\r\n    } else {\r\n      // Otherwise, select the new entry (and collapse any previously expanded one)\r\n      setSelectedEntry(entry);\r\n    }\r\n  };\r\n\r\n  const handleDeleteClick = (e, entry) => {\r\n    e.stopPropagation(); // Prevent triggering the handleEntryClick\r\n    setConfirmDelete(entry);\r\n  };\r\n\r\n  const handleConfirmDelete = async () => {\r\n    if (!confirmDelete) return;\r\n    \r\n    try {\r\n      setDeleteLoading(true);\r\n      console.log('Deleting health record with ID:', confirmDelete._id);\r\n      \r\n      // Try the delete operation\r\n      await healthAPI.deleteHealthRecord(confirmDelete._id);\r\n      \r\n      // Remove the record from state\r\n      setHealthData(prevData => ({\r\n        ...prevData,\r\n        recentEntries: prevData.recentEntries.filter(entry => entry._id !== confirmDelete._id)\r\n      }));\r\n      \r\n      // Reset states\r\n      setConfirmDelete(null);\r\n      setSelectedEntry(null);\r\n      \r\n    } catch (err) {\r\n      console.error('Error details:', err.response?.data || err.message);\r\n      setError(err.response?.data?.error || 'Failed to delete record');\r\n    } finally {\r\n      setDeleteLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleCancelDelete = () => {\r\n    setConfirmDelete(null);\r\n  };\r\n\r\n  // Check if user can delete the record\r\n  const canDelete = (entry) => {\r\n    if (!currentUser || !entry) return false;\r\n    \r\n    // Doctors can ONLY delete records they created\r\n    if (currentUser.role === 'doctor') {\r\n      return entry.doctor && entry.doctor._id === currentUser.id;\r\n    }\r\n    \r\n    // Patients can ONLY delete records they created themselves (self-recorded)\r\n    if (currentUser.role === 'patient') {\r\n      return !entry.doctor; // Only allow deleting self-recorded entries (no doctor field)\r\n    }\r\n    \r\n    return false;\r\n  };\r\n\r\n  if (loading) {\r\n    return <div className=\"loading\">Loading dashboard data...</div>;\r\n  }\r\n\r\n  // Doctor Dashboard\r\n  if (isDoctor) {\r\n    return (\r\n      <div className=\"dashboard animate-fade-in\">\r\n        {error && <div className=\"alert alert-danger\">{error}</div>}\r\n        \r\n        <header className=\"dashboard-header animate-slide-in\">\r\n          <h1>Welcome, Dr. {capitalizeFirstLetter(currentUser?.name) || 'User'}!</h1>\r\n          <p className=\"subtitle\">Your doctor dashboard at MediConnect</p>\r\n        </header>\r\n        \r\n        <div className=\"dashboard-actions animate-slide-in\">\r\n          <Link to=\"/patients\" className=\"btn btn-primary\">\r\n            <span className=\"health-icon\">{icons.patient}</span>\r\n            View My Patients\r\n          </Link>\r\n          <Link to=\"/appointments\" className=\"btn btn-primary\">\r\n            <span className=\"health-icon\">{icons.calendar}</span>\r\n            Manage Appointments\r\n          </Link>\r\n          <Link to=\"/profile\" className=\"btn btn-secondary\">\r\n            <span className=\"health-icon\">{icons.qualification}</span>\r\n            Update Profile\r\n          </Link>\r\n        </div>\r\n\r\n        {/* Upcoming Confirmed Appointments */}\r\n        <div className=\"upcoming-appointments\">\r\n          <h2 className=\"med-card-title\">\r\n            Upcoming Appointments\r\n            {pendingRequestsCount > 0 && (\r\n              <span className=\"badge badge-warning ml-2\">\r\n                {pendingRequestsCount} pending request{pendingRequestsCount !== 1 ? 's' : ''}\r\n              </span>\r\n            )}\r\n          </h2>\r\n          {appointments.length > 0 ? (\r\n            <div className=\"appointments-list animate-stagger\">\r\n              {appointments.map(appointment => (\r\n                <div key={appointment._id} className=\"med-card\">\r\n                  <h3>\r\n                    <span className=\"health-icon\">{icons.calendar}</span>\r\n                    {formatAppointmentDate(appointment.date)} at {formatTimeSlot(appointment.timeSlot)}\r\n                  </h3>\r\n                  <div className=\"appointment-details\">\r\n                    <p><strong>Patient:</strong> {appointment.patient.name}</p>\r\n                    <p><strong>Reason:</strong> {appointment.reason}</p>\r\n                    <div className=\"appointment-actions\">\r\n                      <Link \r\n                        to={`/appointments`} \r\n                        className=\"btn btn-sm btn-primary\"\r\n                      >\r\n                        View Details\r\n                      </Link>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              ))}\r\n            </div>\r\n          ) : (\r\n            <div className=\"empty-state animate-fade-in med-card\">\r\n              <p>No upcoming appointments. \r\n                {pendingRequestsCount > 0 ? ` You have ${pendingRequestsCount} pending request${pendingRequestsCount !== 1 ? 's' : ''}.` : ' Check your appointment requests in the Appointment Management section.'}\r\n              </p>\r\n              <Link to=\"/appointments?status=pending\" className=\"btn btn-primary btn-sm\">\r\n                View Appointment Requests\r\n              </Link>\r\n            </div>\r\n          )}\r\n        </div>\r\n        \r\n        <div className=\"doctor-summary\">\r\n          <div className=\"med-card\">\r\n            <h2>Your Practice Summary</h2>\r\n            <div className=\"doctor-stats\">\r\n              <Link to=\"/patients\" className=\"stat-item\" style={{ textDecoration: 'none', color: 'inherit' }}>\r\n                <span className=\"stat-value\">{patientCount}</span>\r\n                <span className=\"stat-label\">Patients</span>\r\n                <small className=\"d-block text-muted mt-1\">\r\n                  Total patients you've treated\r\n                </small>\r\n              </Link>\r\n              <div className=\"stat-item\">\r\n                <span className=\"stat-value\">{capitalizeFirstLetter(currentUser?.specialization || 'General')}</span>\r\n                <span className=\"stat-label\">Specialization</span>\r\n              </div>\r\n            </div>\r\n            \r\n            {currentUser?.qualifications?.length > 0 ? (\r\n              <div className=\"qualifications-section animate-fade-in\">\r\n                <h3>Your Qualifications</h3>\r\n                <div className=\"qualifications-list\">\r\n                  {currentUser.qualifications.map((qualification, index) => (\r\n                    <div key={index} className=\"qualification-item\">\r\n                      <div className=\"qualification-degree\">\r\n                        <span className=\"degree-icon\">{icons.qualification}</span>\r\n                        {qualification.degree}\r\n                      </div>\r\n                      <div className=\"qualification-details\">\r\n                        <span className=\"institution\">{qualification.institution}</span>\r\n                        <span className=\"year\">{qualification.year}</span>\r\n                      </div>\r\n                    </div>\r\n                  ))}\r\n                </div>\r\n              </div>\r\n            ) : (\r\n              <div className=\"empty-qualifications animate-fade-in\">\r\n                <p>No qualifications added yet. Add your professional qualifications to build trust with patients.</p>\r\n                <Link to=\"/profile\" className=\"btn btn-outline-primary btn-sm\">\r\n                  Add Qualifications\r\n                </Link>\r\n              </div>\r\n            )}\r\n          </div>\r\n        </div>\r\n        \r\n        <div className=\"recent-actions animate-stagger\">\r\n          <h2>What would you like to do?</h2>\r\n          <div className=\"doctor-action-cards\">\r\n            <div className=\"med-card action-card\">\r\n              <h3>Patient Management</h3>\r\n              <p>View and manage your patients' medical records</p>\r\n              <Link to=\"/patients\" className=\"btn btn-outline\">View My Patients</Link>\r\n            </div>\r\n            \r\n            <div className=\"med-card action-card\">\r\n              <h3>Appointment Requests</h3>\r\n              <p>Review and respond to new appointment requests</p>\r\n              <Link to=\"/appointments?status=pending\" className=\"btn btn-outline\">View Requests</Link>\r\n            </div>\r\n            \r\n            <div className=\"med-card action-card\">\r\n              <h3>Add Health Record</h3>\r\n              <p>Create a new health record for a patient</p>\r\n              <Link to=\"/patients\" className=\"btn btn-outline\">Select Patient</Link>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n  \r\n  // Patient Dashboard\r\n  return (\r\n    <div className=\"dashboard animate-fade-in\">\r\n      {error && <div className=\"alert alert-danger\">{error}</div>}\r\n      \r\n      {/* Delete Confirmation Modal */}\r\n      {confirmDelete && (\r\n        <div className=\"modal-backdrop\">\r\n          <div className=\"modal-content\">\r\n            <h2>Confirm Delete</h2>\r\n            <p>Are you sure you want to delete this health record from {new Date(confirmDelete.date).toLocaleDateString()}?</p>\r\n            <p>This action cannot be undone.</p>\r\n            <div className=\"modal-actions\">\r\n              <button \r\n                className=\"btn btn-danger\" \r\n                onClick={handleConfirmDelete}\r\n                disabled={deleteLoading}\r\n              >\r\n                {deleteLoading ? 'Deleting...' : 'Delete'}\r\n              </button>\r\n              <button \r\n                className=\"btn btn-secondary\" \r\n                onClick={handleCancelDelete}\r\n                disabled={deleteLoading}\r\n              >\r\n                Cancel\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )}\r\n      \r\n      <header className=\"dashboard-header animate-slide-in\">\r\n        <h1>Welcome, {capitalizeFirstLetter(currentUser?.name) || 'Patient'}!</h1>\r\n        <p className=\"subtitle\">Your health dashboard at a glance</p>\r\n      </header>\r\n      \r\n      <div className=\"dashboard-actions animate-slide-in\">\r\n        <Link to=\"/record\" className=\"btn btn-primary\">\r\n          <span className=\"health-icon\">{icons.record}</span>\r\n          Record Health Data\r\n        </Link>\r\n        <Link to=\"/history\" className=\"btn btn-secondary\">\r\n          <span className=\"health-icon\">{icons.history}</span>\r\n          View Health History\r\n        </Link>\r\n      </div>\r\n      \r\n      <HealthSummary summary={healthData.summary} selectedEntry={selectedEntry} />\r\n      \r\n      <div className=\"recent-entries\">\r\n        <h2 className=\"med-card-title\">Recent Health Entries</h2>\r\n        {healthData.recentEntries && healthData.recentEntries.length > 0 ? (\r\n          <div className=\"entries-list animate-stagger\">\r\n            {healthData.recentEntries.map(entry => (\r\n              <div \r\n                key={entry._id} \r\n                className={`med-card entry-card ${selectedEntry === entry ? 'selected' : ''}`}\r\n                onClick={() => handleEntryClick(entry)}\r\n              >\r\n                <h3>\r\n                  <div className=\"entry-date-section\">\r\n                    {new Date(entry.date).toLocaleDateString()}\r\n                    <span className=\"recorded-by\">\r\n                      {entry.doctor ? `Recorded by Dr. ${entry.doctor.name || 'Unknown'}` : 'Self-recorded'}\r\n                    </span>\r\n                  </div>\r\n                </h3>\r\n                \r\n                <div className=\"entry-details\">\r\n                  {entry.bloodPressure && (\r\n                    <div>\r\n                      <span className=\"health-icon blood-pressure\">{icons.bloodPressure}</span>\r\n                      Blood Pressure: {entry.bloodPressure.systolic}/{entry.bloodPressure.diastolic}\r\n                    </div>\r\n                  )}\r\n                  {entry.heartRate && (\r\n                    <div>\r\n                      <span className=\"health-icon heart\">{icons.heart}</span>\r\n                      Heart Rate: {entry.heartRate} bpm\r\n                    </div>\r\n                  )}\r\n                  {entry.weight && (\r\n                    <div>\r\n                      <span className=\"health-icon weight\">{icons.weight}</span>\r\n                      Weight: {entry.weight} kg\r\n                    </div>\r\n                  )}\r\n                  {entry.glucoseLevel && (\r\n                    <div>\r\n                      <span className=\"health-icon glucose\">{icons.glucose}</span>\r\n                      Glucose: {entry.glucoseLevel} mg/dL\r\n                    </div>\r\n                  )}\r\n                  \r\n                  {/* Additional health information */}\r\n                  {selectedEntry === entry && (\r\n                    <div className=\"expanded-details\">\r\n                      {entry.symptoms && (\r\n                        <div>\r\n                          <span className=\"health-icon symptoms\">{icons.symptoms}</span>\r\n                          <strong>Symptoms:</strong> {entry.symptoms}\r\n                        </div>\r\n                      )}\r\n                      {entry.medications && (\r\n                        <div>\r\n                          <span className=\"health-icon medications\">{icons.medications}</span>\r\n                          <strong>Medications:</strong> {entry.medications}\r\n                        </div>\r\n                      )}\r\n                      {entry.notes && (\r\n                        <div>\r\n                          <span className=\"health-icon notes\">{icons.notes}</span>\r\n                          <strong>Notes:</strong> {entry.notes}\r\n                        </div>\r\n                      )}\r\n                      <div className=\"recorded-info\">\r\n                        <span className=\"health-icon recorded-by\">{icons.recordedBy}</span>\r\n                        <strong>Recorded by:</strong> {entry.doctor ? `Dr. ${entry.doctor.name}` : 'Self'}\r\n                      </div>\r\n                    </div>\r\n                  )}\r\n                  \r\n                  {/* Delete button - positioned at bottom right */}\r\n                  {canDelete(entry) && (\r\n                    <div className=\"delete-entry-container\">\r\n                      <button \r\n                        className=\"btn btn-delete-entry\" \r\n                        onClick={(e) => handleDeleteClick(e, entry)}\r\n                      >\r\n                        Delete\r\n                      </button>\r\n                    </div>\r\n                  )}\r\n                </div>\r\n              </div>\r\n            ))}\r\n          </div>\r\n        ) : (\r\n          <div className=\"empty-state animate-fade-in\">\r\n            <p>No recent health entries. Start recording your health data today!</p>\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Dashboard;"],"names":["icons","_ref","_displayData$bloodPre","_displayData$bloodPre2","summary","selectedEntry","displayData","Object","keys","length","_jsxs","className","children","_jsx","isSelectedEntry","Date","date","toLocaleDateString","bloodPressure","systolic","diastolic","heartRate","weight","glucoseLevel","Dashboard","currentUser","useAuth","navigate","useNavigate","healthData","setHealthData","useState","recentEntries","patientCount","setPatientCount","appointmentsCount","setAppointmentsCount","pendingRequestsCount","setPendingRequestsCount","appointments","setAppointments","loading","setLoading","error","setError","setSelectedEntry","confirmDelete","setConfirmDelete","deleteLoading","setDeleteLoading","isDoctor","role","isAdmin","useEffect","async","patientsResponse","patientAPI","getVisitedPatients","data","success","count","confirmedAppointmentResponse","appointmentAPI","getMyAppointments","status","confirmedAppointments","pendingAppointmentResponse","response","healthAPI","getDashboardData","console","fetchData","formatAppointmentDate","dateString","format","capitalizeFirstLetter","string","split","map","word","charAt","toUpperCase","slice","toLowerCase","join","canDelete","entry","doctor","_id","id","name","Link","to","appointment","timeSlot","replace","patient","reason","concat","style","textDecoration","color","specialization","_currentUser$qualific","qualifications","qualification","index","degree","institution","year","onClick","log","deleteHealthRecord","prevData","_objectSpread","filter","err","_err$response","_err$response2","_err$response2$data","message","disabled","handleCancelDelete","HealthSummary","handleEntryClick","symptoms","medications","notes","e","handleDeleteClick","stopPropagation"],"sourceRoot":""}