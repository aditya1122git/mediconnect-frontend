{"version":3,"file":"static/js/596.1352f280.chunk.js","mappings":"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","sources":["pages/ViewHistory.jsx"],"sourcesContent":["// src/pages/ViewHistory.js\r\nimport React, { useState, useEffect } from 'react';\r\nimport { Chart, registerables } from 'chart.js';\r\nimport { Line } from 'react-chartjs-2';\r\nimport { healthAPI } from '../api';\r\nimport { useAuth } from '../contexts/AuthContext';\r\n\r\n// Register Chart.js components\r\nChart.register(...registerables);\r\n\r\nconst ViewHistory = () => {\r\n  const [healthRecords, setHealthRecords] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState('');\r\n  const { currentUser } = useAuth();\r\n  const [confirmDelete, setConfirmDelete] = useState(null);\r\n  const [deleteLoading, setDeleteLoading] = useState(false);\r\n  const [filter, setFilter] = useState({\r\n    startDate: '',\r\n    endDate: '',\r\n    type: 'all'\r\n  });\r\n\r\n  const fetchHealthData = async () => {\r\n    try {\r\n      setLoading(true);\r\n      const response = await healthAPI.getHealthRecords({\r\n        startDate: filter.startDate || undefined,\r\n        endDate: filter.endDate || undefined,\r\n        type: filter.type === 'all' ? undefined : filter.type\r\n      });\r\n      \r\n      if (response.data && response.data.data) {\r\n        setHealthRecords(response.data.data);\r\n      } else {\r\n        setHealthRecords([]);\r\n        setError('Invalid data structure received from server');\r\n      }\r\n    } catch (err) {\r\n      setError(err.response?.data?.message || 'Failed to fetch health records');\r\n      console.error('Error fetching health records:', err);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchHealthData();\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, []);\r\n\r\n  const handleFilterChange = (e) => {\r\n    const { name, value } = e.target;\r\n    setFilter(prev => ({\r\n      ...prev,\r\n      [name]: value\r\n    }));\r\n  };\r\n\r\n  const handleFilterSubmit = (e) => {\r\n    e.preventDefault();\r\n    fetchHealthData();\r\n  };\r\n\r\n  const handleDeleteClick = (record) => {\r\n    setConfirmDelete(record);\r\n  };\r\n\r\n  const handleConfirmDelete = async () => {\r\n    if (!confirmDelete) return;\r\n    \r\n    try {\r\n      setDeleteLoading(true);\r\n      console.log('Deleting health record with ID:', confirmDelete._id);\r\n      \r\n      // Try the delete operation\r\n      await healthAPI.deleteHealthRecord(confirmDelete._id);\r\n      \r\n      // Remove the record from state\r\n      setHealthRecords(prevRecords => \r\n        prevRecords.filter(record => record._id !== confirmDelete._id)\r\n      );\r\n      \r\n      // Reset confirmation state\r\n      setConfirmDelete(null);\r\n      \r\n    } catch (err) {\r\n      console.error('Error details:', err.response?.data || err.message);\r\n      setError(err.response?.data?.error || 'Failed to delete record');\r\n    } finally {\r\n      setDeleteLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleCancelDelete = () => {\r\n    setConfirmDelete(null);\r\n  };\r\n\r\n  // Check if user can delete the record\r\n  const canDelete = (record) => {\r\n    if (!currentUser || !record) return false;\r\n    \r\n    // Doctors can ONLY delete records they created\r\n    if (currentUser.role === 'doctor') {\r\n      return record.doctor && record.doctor._id === currentUser.id;\r\n    }\r\n    \r\n    // Patients can ONLY delete records they created themselves (self-recorded)\r\n    if (currentUser.role === 'patient') {\r\n      return !record.doctor; // Only allow deleting self-recorded entries (no doctor field)\r\n    }\r\n    \r\n    return false;\r\n  };\r\n\r\n  // Prepare chart data\r\n  const getChartData = (dataType) => {\r\n    if (!healthRecords.length) return null;\r\n    \r\n    const sortedRecords = [...healthRecords].sort((a, b) => new Date(a.date) - new Date(b.date));\r\n    \r\n    const labels = sortedRecords.map(record => new Date(record.date).toLocaleDateString());\r\n    let data = [];\r\n    \r\n    switch (dataType) {\r\n      case 'bloodPressure':\r\n        return {\r\n          labels,\r\n          datasets: [\r\n            {\r\n              label: 'Systolic',\r\n              data: sortedRecords.map(record => record.bloodPressure?.systolic || null),\r\n              borderColor: 'rgb(255, 99, 132)',\r\n              backgroundColor: 'rgba(255, 99, 132, 0.5)',\r\n              tension: 0.2\r\n            },\r\n            {\r\n              label: 'Diastolic',\r\n              data: sortedRecords.map(record => record.bloodPressure?.diastolic || null),\r\n              borderColor: 'rgb(54, 162, 235)',\r\n              backgroundColor: 'rgba(54, 162, 235, 0.5)',\r\n              tension: 0.2\r\n            }\r\n          ]\r\n        };\r\n      case 'heartRate':\r\n        data = sortedRecords.map(record => record.heartRate || null);\r\n        break;\r\n      case 'weight':\r\n        data = sortedRecords.map(record => record.weight || null);\r\n        break;\r\n      case 'glucoseLevel':\r\n        data = sortedRecords.map(record => record.glucoseLevel || null);\r\n        break;\r\n      default:\r\n        return null;\r\n    }\r\n    \r\n    return {\r\n      labels,\r\n      datasets: [\r\n        {\r\n          label: dataType.charAt(0).toUpperCase() + dataType.slice(1),\r\n          data,\r\n          borderColor: 'rgb(75, 192, 192)',\r\n          backgroundColor: 'rgba(75, 192, 192, 0.5)',\r\n          tension: 0.2\r\n        }\r\n      ]\r\n    };\r\n  };\r\n\r\n  const chartOptions = {\r\n    responsive: true,\r\n    plugins: {\r\n      tooltip: {\r\n        mode: 'index',\r\n        intersect: false\r\n      },\r\n      title: {\r\n        display: true,\r\n        text: 'Health Data Over Time'\r\n      }\r\n    },\r\n    scales: {\r\n      x: {\r\n        title: {\r\n          display: true,\r\n          text: 'Date'\r\n        }\r\n      },\r\n      y: {\r\n        title: {\r\n          display: true,\r\n          text: 'Value'\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"view-history\">\r\n      <h1>Health Records History</h1>\r\n      \r\n      {error && <div className=\"alert alert-danger\">{error}</div>}\r\n      \r\n      {/* Delete Confirmation Modal */}\r\n      {confirmDelete && (\r\n        <div className=\"modal-backdrop\">\r\n          <div className=\"modal-content\">\r\n            <h2>Confirm Delete</h2>\r\n            <p>Are you sure you want to delete this health record from {new Date(confirmDelete.date).toLocaleDateString()}?</p>\r\n            <p>This action cannot be undone.</p>\r\n            <div className=\"modal-actions\">\r\n              <button \r\n                className=\"btn btn-danger\" \r\n                onClick={handleConfirmDelete}\r\n                disabled={deleteLoading}\r\n              >\r\n                {deleteLoading ? 'Deleting...' : 'Delete'}\r\n              </button>\r\n              <button \r\n                className=\"btn btn-secondary\" \r\n                onClick={handleCancelDelete}\r\n                disabled={deleteLoading}\r\n              >\r\n                Cancel\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )}\r\n      \r\n      <div className=\"filter-form\">\r\n        <form onSubmit={handleFilterSubmit}>\r\n          <div className=\"filter-row\">\r\n            <div className=\"filter-group\">\r\n              <label htmlFor=\"startDate\">Start Date</label>\r\n              <input \r\n                type=\"date\" \r\n                id=\"startDate\" \r\n                name=\"startDate\"\r\n                value={filter.startDate}\r\n                onChange={handleFilterChange}\r\n                className=\"form-control\"\r\n              />\r\n            </div>\r\n            \r\n            <div className=\"filter-group\">\r\n              <label htmlFor=\"endDate\">End Date</label>\r\n              <input \r\n                type=\"date\" \r\n                id=\"endDate\" \r\n                name=\"endDate\"\r\n                value={filter.endDate}\r\n                onChange={handleFilterChange}\r\n                className=\"form-control\"\r\n              />\r\n            </div>\r\n            \r\n            <div className=\"filter-group\">\r\n              <label htmlFor=\"type\">Data Type</label>\r\n              <select \r\n                id=\"type\" \r\n                name=\"type\"\r\n                value={filter.type}\r\n                onChange={handleFilterChange}\r\n                className=\"form-control\"\r\n              >\r\n                <option value=\"all\">All Data</option>\r\n                <option value=\"bloodPressure\">Blood Pressure</option>\r\n                <option value=\"heartRate\">Heart Rate</option>\r\n                <option value=\"weight\">Weight</option>\r\n                <option value=\"glucoseLevel\">Glucose Level</option>\r\n              </select>\r\n            </div>\r\n            \r\n            <button type=\"submit\" className=\"btn btn-primary\">Filter</button>\r\n          </div>\r\n        </form>\r\n      </div>\r\n      \r\n      {loading ? (\r\n        <div className=\"loading\">Loading health records...</div>\r\n      ) : healthRecords.length === 0 ? (\r\n        <div className=\"no-records\">\r\n          <p>No health records found for the selected period.</p>\r\n        </div>\r\n      ) : (\r\n        <div className=\"health-charts\">\r\n          {(filter.type === 'all' || filter.type === 'bloodPressure') && getChartData('bloodPressure') && (\r\n            <div className=\"chart-container\">\r\n              <h3>Blood Pressure</h3>\r\n              <Line data={getChartData('bloodPressure')} options={chartOptions} />\r\n            </div>\r\n          )}\r\n          \r\n          {(filter.type === 'all' || filter.type === 'heartRate') && getChartData('heartRate') && (\r\n            <div className=\"chart-container\">\r\n              <h3>Heart Rate</h3>\r\n              <Line data={getChartData('heartRate')} options={chartOptions} />\r\n            </div>\r\n          )}\r\n          \r\n          {(filter.type === 'all' || filter.type === 'weight') && getChartData('weight') && (\r\n            <div className=\"chart-container\">\r\n              <h3>Weight</h3>\r\n              <Line data={getChartData('weight')} options={chartOptions} />\r\n            </div>\r\n          )}\r\n          \r\n          {(filter.type === 'all' || filter.type === 'glucoseLevel') && getChartData('glucoseLevel') && (\r\n            <div className=\"chart-container\">\r\n              <h3>Glucose Level</h3>\r\n              <Line data={getChartData('glucoseLevel')} options={chartOptions} />\r\n            </div>\r\n          )}\r\n        </div>\r\n      )}\r\n      \r\n      <div className=\"records-table\">\r\n        <h3>Records List</h3>\r\n        {healthRecords.length === 0 ? (\r\n          <p>No records to display</p>\r\n        ) : (\r\n          <table className=\"table\">\r\n            <thead>\r\n              <tr>\r\n                <th>Date</th>\r\n                <th>Blood Pressure</th>\r\n                <th>Heart Rate</th>\r\n                <th>Weight</th>\r\n                <th>Glucose</th>\r\n                <th>Actions</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {healthRecords.map(record => (\r\n                <tr key={record._id}>\r\n                  <td>{new Date(record.date).toLocaleDateString()}</td>\r\n                  <td>{record.bloodPressure ? `${record.bloodPressure.systolic}/${record.bloodPressure.diastolic}` : '-'}</td>\r\n                  <td>{record.heartRate ? `${record.heartRate} bpm` : '-'}</td>\r\n                  <td>{record.weight ? `${record.weight} kg` : '-'}</td>\r\n                  <td>{record.glucoseLevel ? `${record.glucoseLevel} mg/dL` : '-'}</td>\r\n                  <td>\r\n                    {canDelete(record) && (\r\n                      <button \r\n                        className=\"btn btn-delete-entry\"\r\n                        onClick={() => handleDeleteClick(record)}\r\n                      >\r\n                        Delete\r\n                      </button>\r\n                    )}\r\n                  </td>\r\n                </tr>\r\n              ))}\r\n            </tbody>\r\n          </table>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ViewHistory;"],"names":["Chart","register","registerables","ViewHistory","healthRecords","setHealthRecords","useState","loading","setLoading","error","setError","currentUser","useAuth","confirmDelete","setConfirmDelete","deleteLoading","setDeleteLoading","filter","setFilter","startDate","endDate","type","fetchHealthData","async","response","healthAPI","getHealthRecords","undefined","data","err","_err$response","_err$response$data","message","console","useEffect","handleFilterChange","e","name","value","target","prev","_objectSpread","canDelete","record","role","doctor","_id","id","getChartData","dataType","length","sortedRecords","sort","a","b","Date","date","labels","map","toLocaleDateString","datasets","label","_record$bloodPressure","bloodPressure","systolic","borderColor","backgroundColor","tension","_record$bloodPressure2","diastolic","heartRate","weight","glucoseLevel","charAt","toUpperCase","slice","chartOptions","responsive","plugins","tooltip","mode","intersect","title","display","text","scales","x","y","_jsxs","className","children","_jsx","onClick","log","deleteHealthRecord","prevRecords","_err$response2","_err$response3","_err$response3$data","disabled","handleCancelDelete","onSubmit","preventDefault","htmlFor","onChange","Line","options","concat","handleDeleteClick"],"sourceRoot":""}