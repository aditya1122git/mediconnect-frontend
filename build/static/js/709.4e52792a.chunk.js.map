{"version":3,"file":"static/js/709.4e52792a.chunk.js","mappings":"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","sources":["pages/DoctorProfile.jsx"],"sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\r\nimport { useParams, Link } from 'react-router-dom';\r\nimport { doctorAPI } from '../api';\r\nimport { format } from 'date-fns';\r\n\r\nconst DoctorProfile = () => {\r\n  const { id } = useParams();\r\n  const [doctor, setDoctor] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState('');\r\n  const [selectedDate, setSelectedDate] = useState(format(new Date(), 'yyyy-MM-dd'));\r\n  const [availability, setAvailability] = useState([]);\r\n  const [loadingAvailability, setLoadingAvailability] = useState(false);\r\n\r\n  const fetchDoctorProfile = useCallback(async () => {\r\n    try {\r\n      setLoading(true);\r\n      const response = await doctorAPI.getDoctorById(id);\r\n      \r\n      if (response.data.success) {\r\n        console.log('Doctor profile data:', response.data.data);\r\n        setDoctor(response.data.data);\r\n        setError('');\r\n      } else {\r\n        setError('Failed to fetch doctor profile');\r\n      }\r\n    } catch (err) {\r\n      console.error('Error fetching doctor profile:', err);\r\n      setError('Failed to fetch doctor profile. Please try again later.');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, [id]);\r\n\r\n  const fetchAvailability = useCallback(async () => {\r\n    try {\r\n      setLoadingAvailability(true);\r\n      const response = await doctorAPI.getDoctorAvailability(id, selectedDate);\r\n      \r\n      if (response.data.success) {\r\n        setAvailability(response.data.availableSlots);\r\n      } else {\r\n        console.error('Failed to fetch availability');\r\n      }\r\n    } catch (err) {\r\n      console.error('Error fetching availability:', err);\r\n    } finally {\r\n      setLoadingAvailability(false);\r\n    }\r\n  }, [id, selectedDate]);\r\n\r\n  useEffect(() => {\r\n    fetchDoctorProfile();\r\n  }, [fetchDoctorProfile]);\r\n\r\n  useEffect(() => {\r\n    if (doctor) {\r\n      fetchAvailability();\r\n    }\r\n  }, [doctor, fetchAvailability]);\r\n\r\n  const handleDateChange = (e) => {\r\n    setSelectedDate(e.target.value);\r\n  };\r\n\r\n  if (loading) {\r\n    return <div className=\"loading\">Loading doctor profile...</div>;\r\n  }\r\n\r\n  if (error) {\r\n    return <div className=\"error alert alert-danger\">{error}</div>;\r\n  }\r\n\r\n  if (!doctor) {\r\n    return <div className=\"not-found\">Doctor not found</div>;\r\n  }\r\n\r\n  // Calculate minimum date (today)\r\n  const today = new Date();\r\n  const minDate = format(today, 'yyyy-MM-dd');\r\n  \r\n  // Calculate maximum date (3 months from now)\r\n  const maxDate = format(new Date(today.setMonth(today.getMonth() + 3)), 'yyyy-MM-dd');\r\n\r\n  return (\r\n    <div className=\"doctor-profile\">\r\n      <div className=\"profile-header\">\r\n        <h1>{doctor.name}</h1>\r\n        <p className=\"specialization\">{doctor.specialization}</p>\r\n      </div>\r\n\r\n      <div className=\"profile-details\">\r\n        <div className=\"row\">\r\n          <div className=\"col-md-6\">\r\n            <div className=\"card mb-4\">\r\n              <div className=\"card-header\">\r\n                <h3>Doctor Information</h3>\r\n              </div>\r\n              <div className=\"card-body\">\r\n                <p><strong>Gender:</strong> {doctor.gender || 'Not specified'}</p>\r\n                <p><strong>Specialization:</strong> {doctor.specialization}</p>\r\n                {doctor.profile && (\r\n                  <>\r\n                    {doctor.profile.experience && (\r\n                      <p><strong>Experience:</strong> {doctor.profile.experience} years</p>\r\n                    )}\r\n                    {doctor.profile.about && (\r\n                      <div>\r\n                        <strong>About:</strong>\r\n                        <p>{doctor.profile.about}</p>\r\n                      </div>\r\n                    )}\r\n                  </>\r\n                )}\r\n              </div>\r\n            </div>\r\n            \r\n            {doctor.profile?.qualifications && doctor.profile.qualifications.length > 0 && (\r\n              <div className=\"card mb-4\">\r\n                <div className=\"card-header\">\r\n                  <h3>Professional Qualifications</h3>\r\n                </div>\r\n                <div className=\"card-body\">\r\n                  <div className=\"qualifications-list\">\r\n                    {doctor.profile.qualifications.map((qualification, index) => (\r\n                      <div key={index} className=\"qualification-item mb-3\">\r\n                        <div className=\"qualification-degree\">\r\n                          <span className=\"degree-icon\">ðŸŽ“</span>\r\n                          {qualification.degree}\r\n                        </div>\r\n                        <div className=\"qualification-details\">\r\n                          <span className=\"institution\">{qualification.institution}</span>\r\n                          {qualification.year && <span className=\"year\">{qualification.year}</span>}\r\n                        </div>\r\n                      </div>\r\n                    ))}\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            )}\r\n          </div>\r\n\r\n          <div className=\"col-md-6\">\r\n            <div className=\"card\">\r\n              <div className=\"card-header\">\r\n                <h3>Book an Appointment</h3>\r\n              </div>\r\n              <div className=\"card-body\">\r\n                <div className=\"form-group\">\r\n                  <label htmlFor=\"appointmentDate\">Select Date:</label>\r\n                  <input\r\n                    type=\"date\"\r\n                    id=\"appointmentDate\"\r\n                    className=\"form-control\"\r\n                    value={selectedDate}\r\n                    onChange={handleDateChange}\r\n                    min={minDate}\r\n                    max={maxDate}\r\n                  />\r\n                </div>\r\n\r\n                {loadingAvailability ? (\r\n                  <p>Loading availability...</p>\r\n                ) : (\r\n                  <div className=\"available-slots mt-3\">\r\n                    <h4>Available Time Slots:</h4>\r\n                    {availability.length === 0 ? (\r\n                      <p>No available slots for the selected date.</p>\r\n                    ) : (\r\n                      <div className=\"time-slots\">\r\n                        {availability.map(slot => (\r\n                          <Link\r\n                            key={slot}\r\n                            to={`/book-appointment/${doctor._id}?date=${selectedDate}&slot=${encodeURIComponent(slot)}`}\r\n                            className=\"btn btn-outline-primary time-slot-btn\"\r\n                          >\r\n                            {slot}\r\n                          </Link>\r\n                        ))}\r\n                      </div>\r\n                    )}\r\n                  </div>\r\n                )}\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DoctorProfile; "],"names":["DoctorProfile","_doctor$profile","id","useParams","doctor","setDoctor","useState","loading","setLoading","error","setError","selectedDate","setSelectedDate","format","Date","availability","setAvailability","loadingAvailability","setLoadingAvailability","fetchDoctorProfile","useCallback","async","response","doctorAPI","getDoctorById","data","success","console","log","err","fetchAvailability","getDoctorAvailability","availableSlots","useEffect","_jsx","className","children","today","minDate","maxDate","setMonth","getMonth","_jsxs","name","specialization","gender","profile","_Fragment","experience","about","qualifications","length","map","qualification","index","degree","institution","year","htmlFor","type","value","onChange","e","target","min","max","slot","Link","to","concat","_id","encodeURIComponent"],"sourceRoot":""}