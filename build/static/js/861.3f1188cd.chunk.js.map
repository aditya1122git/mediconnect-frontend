{"version":3,"file":"static/js/861.3f1188cd.chunk.js","mappings":"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","sources":["pages/MyAppointments.jsx"],"sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\r\nimport { appointmentAPI } from '../api';\r\nimport { useAuth } from '../contexts/AuthContext';\r\nimport { format } from 'date-fns';\r\n\r\nconst MyAppointments = () => {\r\n  const [appointments, setAppointments] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState('');\r\n  const [actionLoading, setActionLoading] = useState(false);\r\n  const [statusFilter, setStatusFilter] = useState('all');\r\n  const { currentUser } = useAuth();\r\n\r\n  const fetchAppointments = useCallback(async () => {\r\n    try {\r\n      setLoading(true);\r\n      const params = {};\r\n      if (statusFilter !== 'all') {\r\n        params.status = statusFilter;\r\n      } else {\r\n        // Always explicitly set status=all to override the default behavior in backend\r\n        params.status = 'all';\r\n      }\r\n      \r\n      console.log('Fetching appointments with params:', params);\r\n      const response = await appointmentAPI.getMyAppointments(params);\r\n      \r\n      if (response.data.success) {\r\n        console.log(`Received ${response.data.data.length} appointments`);\r\n        setAppointments(response.data.data);\r\n        setError('');\r\n      } else {\r\n        setError('Failed to fetch appointments');\r\n      }\r\n    } catch (err) {\r\n      console.error('Error fetching appointments:', err);\r\n      setError('Failed to fetch appointments. Please try again later.');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, [statusFilter]);\r\n\r\n  useEffect(() => {\r\n    fetchAppointments();\r\n  }, [fetchAppointments]);\r\n\r\n  const handleStatusChange = async (appointmentId, newStatus, notes = '') => {\r\n    try {\r\n      setActionLoading(true);\r\n      \r\n      const response = await appointmentAPI.updateAppointmentStatus(appointmentId, newStatus, notes);\r\n      \r\n      if (response.data.success) {\r\n        // Update the appointment in the state\r\n        setAppointments(prevAppointments => \r\n          prevAppointments.map(app => \r\n            app._id === appointmentId ? response.data.data : app\r\n          )\r\n        );\r\n      } else {\r\n        setError('Failed to update appointment status');\r\n      }\r\n    } catch (err) {\r\n      console.error('Error updating appointment status:', err);\r\n      setError('Failed to update status. Please try again later.');\r\n    } finally {\r\n      setActionLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleMarkVisited = async (appointmentId, notes = '') => {\r\n    try {\r\n      setActionLoading(true);\r\n      \r\n      const response = await appointmentAPI.markAppointmentVisited(appointmentId, notes);\r\n      \r\n      if (response.data.success) {\r\n        // Update the appointment in the state\r\n        setAppointments(prevAppointments => \r\n          prevAppointments.map(app => \r\n            app._id === appointmentId ? response.data.data : app\r\n          )\r\n        );\r\n      } else {\r\n        setError('Failed to mark appointment as visited');\r\n      }\r\n    } catch (err) {\r\n      console.error('Error marking appointment as visited:', err);\r\n      setError('Failed to mark as visited. Please try again later.');\r\n    } finally {\r\n      setActionLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleCancelAppointment = async (appointmentId) => {\r\n    if (!window.confirm('Are you sure you want to cancel this appointment?')) {\r\n      return;\r\n    }\r\n    \r\n    try {\r\n      setActionLoading(true);\r\n      \r\n      const response = await appointmentAPI.cancelAppointment(appointmentId);\r\n      \r\n      if (response.data.success) {\r\n        // Refresh appointments\r\n        fetchAppointments();\r\n      } else {\r\n        setError('Failed to cancel appointment');\r\n      }\r\n    } catch (err) {\r\n      console.error('Error cancelling appointment:', err);\r\n      setError('Failed to cancel appointment. Please try again later.');\r\n    } finally {\r\n      setActionLoading(false);\r\n    }\r\n  };\r\n\r\n  const formatDate = (dateString) => {\r\n    const date = new Date(dateString);\r\n    return format(date, 'MMMM d, yyyy');\r\n  };\r\n\r\n  const getStatusBadgeClass = (status) => {\r\n    switch (status) {\r\n      case 'pending':\r\n        return 'badge badge-warning';\r\n      case 'confirmed':\r\n        return 'badge badge-success';\r\n      case 'cancelled':\r\n        return 'badge badge-danger';\r\n      case 'completed':\r\n        return 'badge badge-info';\r\n      default:\r\n        return 'badge badge-secondary';\r\n    }\r\n  };\r\n\r\n  // Function to display formatted status text\r\n  const getStatusText = (status) => {\r\n    return status.charAt(0).toUpperCase() + status.slice(1);\r\n  };\r\n\r\n  if (loading) {\r\n    return <div className=\"loading\">Loading appointments...</div>;\r\n  }\r\n\r\n  const isDoctorView = currentUser.role === 'doctor';\r\n\r\n  return (\r\n    <div className=\"my-appointments\">\r\n      <h1>{isDoctorView ? 'Patient Appointments' : 'My Appointments'}</h1>\r\n      \r\n      {error && <div className=\"alert alert-danger\">{error}</div>}\r\n      \r\n      <div className=\"filters mb-4\">\r\n        <div className=\"form-group\">\r\n          <label htmlFor=\"statusFilter\">Filter by Status:</label>\r\n          <select\r\n            id=\"statusFilter\"\r\n            className=\"form-control\"\r\n            value={statusFilter}\r\n            onChange={(e) => setStatusFilter(e.target.value)}\r\n          >\r\n            <option value=\"all\">All Appointments</option>\r\n            <option value=\"pending\">Pending</option>\r\n            <option value=\"confirmed\">Confirmed</option>\r\n            <option value=\"cancelled\">Cancelled</option>\r\n            <option value=\"completed\">Completed</option>\r\n          </select>\r\n        </div>\r\n      </div>\r\n      \r\n      {appointments.length === 0 ? (\r\n        <div className=\"no-appointments\">\r\n          <p>No appointments found for the selected filter.</p>\r\n        </div>\r\n      ) : (\r\n        <div className=\"appointment-list\">\r\n          {appointments.map(appointment => (\r\n            <div key={appointment._id} className=\"appointment-card card mb-3\">\r\n              <div className=\"card-header d-flex justify-content-between align-items-center\">\r\n                <div>\r\n                  <span className={getStatusBadgeClass(appointment.status)}>\r\n                    {getStatusText(appointment.status)}\r\n                  </span>\r\n                  {appointment.visited && (\r\n                    <span className=\"badge badge-success ml-2\">Visited</span>\r\n                  )}\r\n                  <span className=\"ml-2\">{formatDate(appointment.date)} at {appointment.timeSlot}</span>\r\n                </div>\r\n              </div>\r\n              <div className=\"card-body\">\r\n                <div className=\"row\">\r\n                  <div className=\"col-md-6\">\r\n                    {currentUser.role === 'patient' ? (\r\n                      <p><strong>Doctor:</strong> {appointment.doctor ? `${appointment.doctor.name} (${appointment.doctor.specialization})` : 'Not assigned'}</p>\r\n                    ) : (\r\n                      <p><strong>Patient:</strong> {appointment.patient ? appointment.patient.name : 'Unknown patient'}</p>\r\n                    )}\r\n                    <p><strong>Reason:</strong> {appointment.reason}</p>\r\n                    {appointment.notes && <p><strong>Notes:</strong> {appointment.notes}</p>}\r\n                  </div>\r\n                  <div className=\"col-md-6 text-right\">\r\n                    {/* Doctor actions */}\r\n                    {currentUser.role === 'doctor' && appointment.status === 'pending' && (\r\n                      <div className=\"doctor-actions\">\r\n                        <button\r\n                          className=\"btn btn-success mr-2\"\r\n                          onClick={() => handleStatusChange(appointment._id, 'confirmed')}\r\n                          disabled={actionLoading}\r\n                        >\r\n                          Confirm\r\n                        </button>\r\n                        <button\r\n                          className=\"btn btn-danger\"\r\n                          onClick={() => handleCancelAppointment(appointment._id)}\r\n                          disabled={actionLoading}\r\n                        >\r\n                          Decline\r\n                        </button>\r\n                      </div>\r\n                    )}\r\n                    \r\n                    {/* Doctor actions for confirmed appointments */}\r\n                    {currentUser.role === 'doctor' && appointment.status === 'confirmed' && !appointment.visited && (\r\n                      <div className=\"doctor-actions\">\r\n                        <button\r\n                          className=\"btn btn-info mr-2\"\r\n                          onClick={() => handleMarkVisited(appointment._id)}\r\n                          disabled={actionLoading}\r\n                        >\r\n                          Mark as Completed (Visited)\r\n                        </button>\r\n                        <button\r\n                          className=\"btn btn-secondary\"\r\n                          onClick={() => handleStatusChange(appointment._id, 'completed')}\r\n                          disabled={actionLoading}\r\n                        >\r\n                          Complete (No Visit)\r\n                        </button>\r\n                      </div>\r\n                    )}\r\n                    \r\n                    {/* Patient actions */}\r\n                    {currentUser.role === 'patient' && \r\n                     (appointment.status === 'pending' || appointment.status === 'confirmed') && (\r\n                      <button\r\n                        className=\"btn btn-danger\"\r\n                        onClick={() => handleCancelAppointment(appointment._id)}\r\n                        disabled={actionLoading}\r\n                      >\r\n                        Cancel Appointment\r\n                      </button>\r\n                    )}\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          ))}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MyAppointments; "],"names":["MyAppointments","appointments","setAppointments","useState","loading","setLoading","error","setError","actionLoading","setActionLoading","statusFilter","setStatusFilter","currentUser","useAuth","fetchAppointments","useCallback","async","params","status","console","log","response","appointmentAPI","getMyAppointments","data","success","concat","length","err","useEffect","handleStatusChange","appointmentId","newStatus","notes","arguments","undefined","updateAppointmentStatus","prevAppointments","map","app","_id","handleCancelAppointment","window","confirm","cancelAppointment","formatDate","dateString","date","Date","format","getStatusBadgeClass","_jsx","className","children","isDoctorView","role","_jsxs","htmlFor","id","value","onChange","e","target","appointment","charAt","toUpperCase","slice","visited","timeSlot","doctor","name","specialization","patient","reason","onClick","disabled","markAppointmentVisited","handleMarkVisited"],"sourceRoot":""}